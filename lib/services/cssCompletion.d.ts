import * as nodes from '../parser/cssNodes';
import { Symbols } from '../parser/cssSymbolScope';
import * as languageFacts from './languageFacts';
import { TextDocument, Position, CompletionList, Range } from 'vscode-languageserver-types';
export declare class CSSCompletion {
    variablePrefix: string;
    position: Position;
    offset: number;
    currentWord: string;
    textDocument: TextDocument;
    styleSheet: nodes.Stylesheet;
    symbolContext: Symbols;
    defaultReplaceRange: Range;
    nodePath: nodes.Node[];
    constructor(variablePrefix?: string);
    private getSymbolContext();
    doComplete(document: TextDocument, position: Position, styleSheet: nodes.Stylesheet): CompletionList;
    private findInNodePath(...types);
    getCompletionsForDeclarationProperty(declaration: nodes.Declaration, result: CompletionList): CompletionList;
    private getPropertyProposals(declaration, result);
    private valueTypes;
    getCompletionsForDeclarationValue(node: nodes.Declaration, result: CompletionList): CompletionList;
    getValueEnumProposals(entry: languageFacts.IEntry, existingNode: nodes.Node, result: CompletionList): CompletionList;
    getCSSWideKeywordProposals(entry: languageFacts.IEntry, existingNode: nodes.Node, result: CompletionList): CompletionList;
    getCompletionsForInterpolation(node: nodes.Interpolation, result: CompletionList): CompletionList;
    getVariableProposals(existingNode: nodes.Node, result: CompletionList): CompletionList;
    getVariableProposalsForCSSVarFunction(result: CompletionList): CompletionList;
    getUnitProposals(entry: languageFacts.IEntry, existingNode: nodes.Node, result: CompletionList): CompletionList;
    protected getCompletionRange(existingNode: nodes.Node): Range;
    protected getColorProposals(entry: languageFacts.IEntry, existingNode: nodes.Node, result: CompletionList): CompletionList;
    protected getPositionProposals(entry: languageFacts.IEntry, existingNode: nodes.Node, result: CompletionList): CompletionList;
    protected getRepeatStyleProposals(entry: languageFacts.IEntry, existingNode: nodes.Node, result: CompletionList): CompletionList;
    protected getLineProposals(entry: languageFacts.IEntry, existingNode: nodes.Node, result: CompletionList): CompletionList;
    protected getBoxProposals(entry: languageFacts.IEntry, existingNode: nodes.Node, result: CompletionList): CompletionList;
    protected getImageProposals(entry: languageFacts.IEntry, existingNode: nodes.Node, result: CompletionList): CompletionList;
    protected getTimingFunctionProposals(entry: languageFacts.IEntry, existingNode: nodes.Node, result: CompletionList): CompletionList;
    protected getBasicShapeProposals(entry: languageFacts.IEntry, existingNode: nodes.Node, result: CompletionList): CompletionList;
    getCompletionsForStylesheet(result: CompletionList): CompletionList;
    getCompletionForTopLevel(result: CompletionList): CompletionList;
    getCompletionsForRuleSet(ruleSet: nodes.RuleSet, result: CompletionList): CompletionList;
    getCompletionsForSelector(ruleSet: nodes.RuleSet, result: CompletionList): CompletionList;
    getCompletionsForDeclarations(declarations: nodes.Declarations, result: CompletionList): CompletionList;
    getCompletionsForVariableDeclaration(declaration: nodes.VariableDeclaration, result: CompletionList): CompletionList;
    getCompletionsForExpression(expression: nodes.Expression, result: CompletionList): CompletionList;
    getCompletionsForFunctionArgument(arg: nodes.FunctionArgument, func: nodes.Function, result: CompletionList): CompletionList;
    getCompletionsForFunctionDeclaration(decl: nodes.FunctionDeclaration, result: CompletionList): CompletionList;
    getCompletionsForMixinReference(ref: nodes.MixinReference, result: CompletionList): CompletionList;
    getTermProposals(existingNode: nodes.Node, result: CompletionList): CompletionList;
    private makeTermProposal(symbol, parameters, existingNode);
}
