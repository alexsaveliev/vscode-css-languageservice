import { TokenType } from './cssScanner';
import * as cssParser from './cssParser';
import * as nodes from './cssNodes';
export declare class SCSSParser extends cssParser.Parser {
    constructor();
    _parseStylesheetStatement(): nodes.Node;
    _parseImport(): nodes.Node;
    _parseVariableDeclaration(panic?: TokenType[]): nodes.VariableDeclaration;
    _parseMediaFeatureName(): nodes.Node;
    _parseKeyframeSelector(): nodes.Node;
    _parseVariable(): nodes.Variable;
    _parseIdent(referenceTypes?: nodes.ReferenceType[]): nodes.Identifier;
    _parseTerm(): nodes.Term;
    _parseInterpolation(): nodes.Node;
    _parseOperator(): nodes.Node;
    _parseUnaryOperator(): nodes.Node;
    _parseRuleSetDeclaration(): nodes.Node;
    _parseDeclaration(resyncStopTokens?: TokenType[]): nodes.Declaration;
    _parseNestedProperties(): nodes.NestedProperties;
    _parseExtends(): nodes.Node;
    _parseSimpleSelectorBody(): nodes.Node;
    _parseSelectorCombinator(): nodes.Node;
    _parseSelectorPlaceholder(): nodes.Node;
    _parseWarnAndDebug(): nodes.Node;
    _parseControlStatement(parseStatement?: () => nodes.Node): nodes.Node;
    _parseIfStatement(parseStatement: () => nodes.Node): nodes.Node;
    private _internalParseIfStatement(parseStatement);
    _parseForStatement(parseStatement: () => nodes.Node): nodes.Node;
    _parseEachStatement(parseStatement: () => nodes.Node): nodes.Node;
    _parseWhileStatement(parseStatement: () => nodes.Node): nodes.Node;
    _parseFunctionBodyDeclaration(): nodes.Node;
    _parseFunctionDeclaration(): nodes.Node;
    _parseReturnStatement(): nodes.Node;
    _parseMixinDeclaration(): nodes.Node;
    _parseParameterDeclaration(): nodes.Node;
    _parseMixinContent(): nodes.Node;
    _parseMixinReference(): nodes.Node;
    _parseMixinReferenceBodyStatement(): nodes.Node;
    _parseFunctionArgument(): nodes.Node;
}
